// Here we have to swap the data only for the nodes not the nodes 

/*
We will maintain three pointers, first, middle and last. 
When we find the first point where current node value is smaller than previous node value, we update the first with the previous node & middle with the current node. 
When we find the second point where current node value is smaller than previous node value, we update the last with the current node. 
In case #2, we will never find the second point. So, last pointer will not be updated. 
After processing, if the last node value is null, then two swapped nodes of BST are adjacent. 
*/

void swap(int *a,int *b)
{
	int temp = *a;
	*a = *b;
	*b = temp;
}

void correctBST(node *root,node **first,node **middle,node **last,node **prev)
{
	if(root)
	{
		correctBST(root->left,first,middle,last,prev);
		
		if(*prev && (*prev)->data > root->data)
		{
			if(!(*first))
			{
				*first = *prev;
				*middle = root;
			}
			else
				*last = root;
		}
		*prev = root;

		correctBST(root->right,first,middle,last,prev);
	}
}	


void correct(node *root)
{
	node *first,*middle,*last,*prev;
	first = middle = last = prev = NULL;
	correctBST(node,&first,&middle,&last,&prev);
	
	if(first && last)	// nodes are not adjacent
		swap(&(first->data),&(last->data));	
	else if(first && middle)	// adjacent nodes
		swap(&(first->data),&(middle->data));
}


int main()
{
	// setting up the tree and nodes 

	correct(root);

	preorder(root);	// just to ensure the correction
}
